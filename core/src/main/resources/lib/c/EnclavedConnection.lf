target C;

reactor _EnclavedConnection<T>(
  source_env: environment_t* = 0,
  dest_env: environment_t* = 0,
  has_after_delay: bool = false, 
  delay: time = 0 msec, 
  is_physical: bool = false) {


  logical action logAction: T
  physical action phyAction: T

  input in: T
  output out: T

  preamble {=
    #ifdef __cplusplus
    extern "C" {
    #endif
      #include "reactor_common.h"
      #include "rti_local.h"
      #include <string.h>
    #ifdef __cplusplus
    }
    #endif
  =}

  reaction(logAction) -> out {=
    #if defined T_IS_TOKEN_TYPE
      out->value = (T) logAction.tmplt.token->value
      _lf_replace_template_token((token_template_t*)out, logAction.tmplt.token);
      out->is_present=true;
    #else
      lf_set(out, *(T*)(logAction->token->value));
    #endif
  =}
  reaction(phyAction) -> out {=
  
  =}
  reaction(in) -> logAction, phyAction {=
    if (self->is_physical) {

    } else {
      tag_t target_tag = self->source_env->current_tag;
      if (self->has_after_delay) {
        target_tag = lf_delay_tag(self->source_env->current_tag, self->delay);
      }
      if (lf_tag_compare(target_tag, self->dest_env->stop_tag) > 0) {
        return;
      }

      lf_critical_section_enter(self->dest_env);
      #if defined T_IS_TOKEN_TYPE
        // If we have a token-type, simply schedule the token at the desired tag"
        _lf_schedule_at_tag(self->dest_env, act->_base.trigger, target_tag, in->token);
      #else
        // If we have a native type:
        int length = 1;
        if (in->token) length = in->length;
        // The following is copied from `lf_schedule_copy` except for using"
        //  `_lf_schedule_at_tag`:
        token_template_t* tmplate = (token_template_t*)logAction;
        lf_token_t* token = _lf_initialize_token(tmplate, length);
        memcpy(token->value, &(in->value), tmplate->type.element_size * length);
        // Schedule event to the destination environment.
        int result = _lf_schedule_at_tag(self->dest_env, logAction->_base.trigger, target_tag, token);
        // Notify the main thread in case it is waiting for physical time to elapse
      #endif
        lf_notify_of_event(self->dest_env);
        // Notify the local RTI that we have scheduled something onto the event queue of another enclave
        rti_update_other_net_locked(self->source_env->enclave_info, self->dest_env->enclave_info, target_tag);
        lf_critical_section_exit(self->dest_env);
    }
  =}
}


