// Verify that deadline increases from 50 ms to 100 ms works.
// Also, test if the increased deadline works when reaction is triggered again.
target C {
  timeout: 100 msec
}

reactor IncreaseDeadline {
  state deadline_increased: bool = false
  state deadline_checked: bool = false
  timer t(0, 100 msec)

  reaction(t) {=
    if (!self->deadline_increased) {
        lf_update_deadline(self, MSEC(100));
        lf_sleep(MSEC(50));
        if (lf_check_deadline(self, true)) {
            lf_print_error_and_exit("Deadline update failed. Deadline handler should not invoked on lag of 50 msec.");
        }
        lf_sleep(MSEC(50));
        if (!lf_check_deadline(self, true)) {
            lf_print_error_and_exit("Deadline update failed. Deadline handler was not invoked on lag of 100 msec.");
        }
        self->deadline_increased = true;
    } else {
        // When the reaction is triggered again, the deadline should not be violated, and enter here.
        lf_print("Deadline was not violated with lag smaller than 100 msec, as expected.");
    }
  =} deadline(50 msec) {=
    lf_print("Deadline violation detected at Logical time: %lld msecs. Physical time: %lld msecs.", lf_time_logical_elapsed() / MSEC(1), lf_time_physical_elapsed() / MSEC(1));
    // When the next reaction is invoked on logical time 100 msec, the deadline handler should not be invoked when only sleeping 50 msecs.
    lf_sleep(MSEC(50));
    if (self->deadline_checked) {
      lf_print_error_and_exit("Deadline should not be violated with lag smaller than 100 msecs!");
    }
    self->deadline_checked = true;
  =}
}

main reactor {
  increaseDeadline = new IncreaseDeadline()
}
