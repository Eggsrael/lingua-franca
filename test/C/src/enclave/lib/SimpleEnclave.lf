target C;


reactor EnclaveSink(
    afterDelay:time_t = 50 msec,
    timerPeriod:time_t = 100 msec,
    timerOffset:time_t = 75 msec,
    expectedInputs:int = 10, 
    inputPeriod:time_t = 100 msec,
    duration:time_t = 1 sec
) {
    preamble {=
      #include "platform.h"
    =}
    input in: instant_t

    timer t(timerOffset, timerPeriod)
    state inCnt: int = 0
    state tCnt: int = 0

    reaction(in) {=
      time_t expected_in = lf_time_logical_elapsed() - self->afterDelay;
      lf_assert(in->value == (expected_in), "EnclaveSink failed. Got: " PRINTF_TIME " expected: " PRINTF_TIME, in->value, expected_in);
      lf_assert(self->inCnt == self->tCnt, "Expected inCnt and tCnt equal got %u and %u", self->inCnt, self->tCnt);
      self->inCnt++;
    =}

    reaction(t) {=
      lf_assert(self->inCnt == self->tCnt+1, "In didnt fire before timer");
      self->tCnt++;
    =}

    reaction(shutdown) {=
      int expected_tCnt = (self->duration - self->timerOffset)/self->timerPeriod + 1;
      lf_assert(self->inCnt == self->expectedInputs, "Wrong inCnt. Got %u expected %u", self->inCnt, self->expectedInputs);
      lf_assert(self->tCnt == expected_tCnt, "Wrong tCnt. Got %u expected %u", self->tCnt, expected_tCnt);
    =}
}

reactor EnclaveSource(
    timerPeriod: time_t = 100 msec,
    timerOffset: time_t = 0 msec
) {
    preamble {=
      #include "platform.h"
    =}
    output out:instant_t
    timer t(timerOffset, timerPeriod)

    reaction(t) -> out {=
        lf_sleep(MSEC(100));
        lf_set(out, lf_time_logical_elapsed());
    =}
}

reactor EnclavePassthru {
  input in:instant_t
  output out:instant_t

  reaction(in) -> out {=
    lf_set(out, in->value);
  =}
}